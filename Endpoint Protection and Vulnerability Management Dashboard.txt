Endpoint Protection and Vulnerability Management Dashboard

Endpoint Security Controls Status
Windows
Antivirus/Anti-malware Service Status
Index=Your_Windows_Index sourcetype=”WinEventLog:System” EventCode=7036
| eval ServiceName=param1, ServiceState=param2
| search ServiceName=”WinDefend” OR ServiceName=”MsMpEng” // MsMpEng is Microsoft Antimalware Service
| dedup host sortby -_time
| where ServiceState=”stopped”
| table _time, host, ServiceName, ServiceState

Firewall Status (Windows Firewall)
Index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-Windows Firewall With Advanced Security/Firewall” EventCode=2003 (profileisoff) | rex field=_raw “Profile (?\w+) is now off.”
| dedup host, profile sortby -_time
| table _time, host, profile, Message

Disk Encryption Status (BitLocker)
Index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-BitLocker-DrivePreparationTool/Admin” OR sourcetype=”your_epp_inventory_sourcetype” EventCode=853 OR (source=”epp_inventory” encryption_status=”off”)
// EventID 853: BitLocker Drive Encryption recovery information for volume C: was successfully backed up to Active Directory Domain Services. (Indicates it was enabled)
// Look for absence of recent ‘enabled’ events or explicit ‘disabled/suspended’ status from EPP.
// This is a harder one without dedicated EPP inventory data.
// A simpler start could be looking for errors in BitLocker logs.
| search EventCode=XYZ_BitLocker_Error_Code OR (sourcetype=”epp_data” bitlocker_status=”Error” OR bitlocker_status=”Disabled”)
| stats count by host, bitlocker_status, Message
| table host, bitlocker_status, Message

EDR Agent Health/Status
Index=Your_EDR_Index sourcetype=”your_edr_agent_health_sourcetype”
| dedup host sortby -_time
| where agent_status=”Error” OR agent_status=”Not Reporting” OR last_seen < relative_time(now(), “-1h”) // Agent hasn’t checked in for an hour
| table _time, host, agent_status, last_seen, agent_version

Linux
Antivirus Service Status
Index=Your_Linux_Index sourcetype=linux_ps (COMMAND=”clamd” OR COMMAND=”clamav-daemon”)
| stats dc(host) as reporting_hosts by COMMAND
// More effectively, look for absence or “stopped” messages in syslog for the service
// index=Your_Linux_Index sourcetype=syslog (host=* systemd OR host=* service) (“clamav-daemon.service: Succeeded” OR “Stopped Clam AntiVirus Daemon”)
// | dedup host sortby -_time
// | where _raw matches “Stopped” OR _raw matches “Failed”
// | table _time, host, process_name, message
// This is better done with a heartbeat/health check from the EPP/AV solution itself if available.
// For a basic check if it’s ever reported as stopped recently: Index=Your_Linux_Index (sourcetype=syslog OR sourcetype=linux_messages) (“clamd” OR “clamav-daemon”) (stopped OR failed OR “activating process exited”)
| stats earliest(_time) as first_occurrence, latest(_time) as last_occurrence, values(MESSAGE) as messages by host, process_name
| table host, process_name, last_occurrence, messages

Firewall Status
Index=Your_Linux_Index sourcetype=syslog (host=* systemd OR host=* service) “firewalld.service”
| dedup host sortby -_time
| where _raw matches “inactive (dead)” OR _raw matches “failed” OR _raw matches “Stopped”
| table _time, host, process_name, Message

EDR Agent Health/Status
Index=Your_EDR_Index sourcetype=”your_linux_edr_agent_health_sourcetype” os_type=”Linux”
| dedup host sortby -_time
| where agent_status=”Error” OR agent_status=”Not Reporting” OR last_seen < relative_time(now(), “-1h”)
| table _time, host, agent_status, last_seen, agent_version

SELinux/AppArmor Status
Index=Your_Auditd_Index sourcetype=linux_audit type=AVC msg=* // AVC denials indicate SELinux is active. Absence of these on a system supposed to have them could be an issue, or it's permissive.
// More direct way is if you log ‘getenforce’ or ‘sestatus’ output periodically:
// index=Your_Linux_Index sourcetype=linux_commands command=”getenforce”
// | dedup host sortby -_time
// | where output!=”Enforcing”
// | table _time, host, output
// For AppArmor (from syslog/kern.log):
Index=Your_Linux_Index sourcetype=syslog (kernel AND (AppArmor AND (status OR profile)))
| rex “apparmor=\”(?<apparmor_status>\w+)\”.*profile=\”(?<apparmor_profile>[^\”]+)\””
| search apparmor_status=”DENIED” // or look for startup messages indicating mode
| stats count by host, apparmor_profile, apparmor_status
| table host, apparmor_profile, apparmor_status, count

Active Threats
Windows and Linux
High Severity EPP/EDR Alerts
Index=Your_EDR_Index OR index=Your_EPP_Index (severity=”high” OR severity=”critical” OR priority=”high” OR priority=”critical”)
| stats count by _time, host, rule_name, signature, threat_name, user, process_name, action_taken
| sort -_time
| table _time, host, rule_name, signature, threat_name, user, process_name, action_taken, count

Confirmed Malicious File/Process Detections (Behavioral)
Index=Your_EDR_Index detection_type=”behavioral” (disposition=”malicious” OR threat_status=”active” OR confirmed_threat=”true”)
| stats earliest(_time) as first_seen, latest(_time) as last_seen, values(process_path) as suspicious_processes, values(command_line) as cmd_lines by host, threat_name, detection_id
| sort -last_seen
| table host, threat_name, first_seen, last_seen, suspicious_processes, cmd_lines

Potential Ransomware Activity Indicators
Index=Your_Sysmon_Index EventCode=1 (process_name=”vssadmin.exe” AND command_line=”delete shadows”) OR (process_name=”wbadmin.exe” AND command_line=”delete catalog”)
| stats count by _time, host, user, process_name, command_line
| sort -_time
| table _time, host, user, process_name, command_line, count
// Add EDR specific ransomware detection names:
// OR (index=Your_EDR_Index (threat_name=”Ransomware” OR rule_name=”Ransomware” OR category=”Ransomware”))

Missing Patches
Windows
Hosts with Missing Critical/High Security Patches (from Vulnerability Scanner or WSUS logs)
Index=Your_Vuln_Index (severity=”Critical” OR severity=”High”) (patch_status=”missing” OR state=”Vulnerable”) os=”Windows”
| stats dc(vulnerability_title) as missing_critical_high_patches_count, values(vulnerability_title) as vulnerabilities by host
| sort -missing_critical_high_patches_count
| table host, missing_critical_high_patches_count, vulnerabilities

Specific Important KB Missing
// Using vulnerability scanner data is more reliable
Index=Your_Vuln_Index os=”Windows” (vulnerability_id=”MSXX-XXX” OR kb_id=”KBXXXXXXX” OR cve=”CVE-XXXX-XXXXX”) (patch_status=”missing” OR state=”Vulnerable”)
| stats values(patch_solution) as solution by host, vulnerability_title
| table host, vulnerability_title, solution
// If you have a list of installed patches per host:
// index=patch_inventory sourcetype=windows_installed_patches host=*
// | stats values(KBID) as installed_kbs by host
// | search NOT installed_kbs=”KB5001234” // The KB you are looking for
// | table host

Linux
Hosts with Outdated Security Packages (from Vulnerability Scanner)
Index=Your_Vuln_Index (severity=”Critical” OR severity=”High”) (patch_status=”missing” OR state=”Vulnerable”) (os=”Linux” OR os_distro=”Ubuntu” OR os_distro=”CentOS” OR os_distro=”RedHat”)
| stats dc(vulnerability_title) as missing_security_updates_count, values(package_name) as packages by host
| sort -missing_security_updates_count
| table host, missing_security_updates_count, packages

Endpoint Detection and Response (EDR) Specific Alerts
Windows and Linux
Suspicious Process Execution (e.g., LOLBAS, PowerShell encoding)
Index=Your_Sysmon_Index EventCode=1 (process_name=”powershell.exe” AND (command_line=”* -enc ” OR command_line=” -EncodedCommand ” OR command_line=” -nop -exec bypass ”)) OR (process_name IN (“certutil.exe”, “regsvr32.exe”, “mshta.exe”, “rundll32.exe”) AND command_line=”-urlcache*” OR command_line=”/shttp*”)
| stats count by _time, host, user, process_name, command_line, parent_process_name
| sort -_time
| table _time, host, user, process_name, command_line, parent_process_name, count

Detected Lateral Movement (e.g., PsExec, WMI remote execution, SSH from unusual source)
Index=Your_Sysmon_Index EventCode=1 process_name=”PSEXESVC.exe”
| stats count by _time, host, user, parent_process_name
| sort -_time
| table _time, host, user, parent_process_name, count
// For WMI remote process creation (EventCode=1, ParentImage ending in WmiPrvSE.exe, and process not usually child of WmiPrvSE)

Index=Your_Sysmon_Index EventCode=1 ParentImage=”C:\Windows\System32\wbem\WmiPrvSE.exe” NOT process_name IN (“trusted_child1.exe”, “trusted_child2.exe”) | stats count by _time, host, user, process_name, command_line, ParentImage | sort -_time | table _time, host, user, process_name, command_line, ParentImage, count

SSH from internal host to another internal host NOT typical jump server
Index=Your_Linux_Index (sourcetype=linux_secure OR sourcetype=syslog) “Accepted publickey for” OR “Accepted password for”
| rex “Accepted \S+ for (?\S+) from (?<src_ip>\S+) port \d+ ssh2”
| where isnotnull(src_ip) AND src_ip!=”EXTERNAL_GATEWAY_IP” AND src_ip!=”KNOWN_ADMIN_WORKSTATION_IP_RANGE”
| stats count by src_ip, user, dest_host // dest_host is the logging server
| where count > 5 // Tune threshold
| sort -count
| table src_ip, user, dest_host, count

Credential Dumping Attempts (e.g., LSASS access, mimikatz patterns)
Index=Your_Sysmon_Index EventCode=10 TargetImage=”C:\Windows\System32\lsass.exe” CallTrace=”dbgcore.dll” OR CallTrace=”dbghelp.dll” NOT (SourceImage=”C:\Windows\System32\svchost.exe” OR SourceImage=”C:\Windows\System32\taskmgr.exe”) // Filter known good ones
| stats count by _time, host, SourceImage, TargetImage, GrantedAccess
| sort -_time
| table _time, host, SourceImage, TargetImage, GrantedAccess, count
// Or from EDR:
// index=Your_EDR_Index (rule_name=”Mimikatz” OR rule_name=”LSASS” OR threat_name=”CredentialTheft”)

Suspicious file access to shadow/passwd, or auditd logs for specific syscalls if EDR doesn’t cover
Index=Your_Auditd_Index sourcetype=linux_audit type=SYSCALL (path=”/etc/shadow” OR path=”/etc/passwd”) (syscall=openat OR syscall=open) perm=r key=”sensitive_file_access” NOT (exe=”/usr/bin/passwd” OR exe=”/usr/sbin/unix_chkpwd”)
| stats count by _time, host, auid, exe, path
| sort -_time
| table _time, host, auid, exe, path, count

Virus and Malware
Windows and Linux
Top Detected Malware by Name
Index=Your_EPP_Index OR index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-Windows Defender/Operational” EventCode=1006 OR index=Your_Linux_AV_Index // Defender Event 1006: Malware detected
| stats count by malware_name // Field name might be threat_name, signature, VirusName etc.
| sort -count
| head 10
| table malware_name, count

Hosts with Most Malware Detections
Index=Your_EPP_Index OR index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-Windows Defender/Operational” EventCode=1006 OR index=Your_Linux_AV_Index
| stats count as detection_count, dc(malware_name) as distinct_malware by host
| sort -detection_count
| head 10
| table host, detection_count, distinct_malware

Malware Detection Actions
Index=Your_EPP_Index OR index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-Windows Defender/Operational” (EventCode=1007 OR EventCode=1008 OR EventCode=1009 OR EventCode=1015 OR EventCode=1117 OR EventCode=1118 OR EventCode=1119) // Defender events for actions
// Or for general EPP:
// | search (action_taken=* OR malware_status=*)
| stats count by action_taken // Field may be ‘status’, ‘action’, ‘remediation_status’
| sort -count
| table action_taken, count

Vulnerability Scanner Insights
Windows and Linux
Index=Your_Vuln_Index (severity=”Critical” OR severity=”High” OR cvss_base_score>=7.0) (state=”Vulnerable” OR state=”Active” OR state=”New” OR patch_status=”missing”)
| stats dc(host) as affected_hosts_count by vulnerability_title, cve, cvss_base_score, solution
| sort -affected_hosts_count
| head 10
| table vulnerability_title, cve, cvss_base_score, affected_hosts_count, solution

Hosts with Most Critical/High Vulnerabilities
Index=Your_Vuln_Index (severity=”Critical” OR severity=”High” OR cvss_base_score>=7.0) (state=”Vulnerable” OR state=”Active” OR state=”New” OR patch_status=”missing”)
| stats count as vulnerability_count, values(vulnerability_title) as vulnerabilities by host
| sort -vulnerability_count
| head 10
| table host, vulnerability_count, vulnerabilities

Aging of Open Critical/High Vulnerabilities
Index=Your_Vuln_Index (severity=”Critical” OR severity=”High” OR cvss_base_score>=7.0) (state=”Vulnerable” OR state=”Active” OR state=”New” OR patch_status=”missing”)
| eval first_discovered_epoch = strptime(first_discovered_date, “%Y-%m-%d %H:%M:%S”) // Adjust date format if needed
| eval age_days = round((now() – first_discovered_epoch) / 86400, 0)
| where age_days > 30 // Show vulns older than 30 days
| stats avg(age_days) as avg_age_days, max(age_days) as max_age_days, values(host) as affected_hosts by vulnerability_title, cve
| sort -max_age_days
| table vulnerability_title, cve, avg_age_days, max_age_days, affected_hosts

Policy Infraction
Windows
// Using Microsoft-Windows-Kernel-PnP/Configuration (more general PnP, might need filtering for USB storage)
Index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-Kernel-PnP/Configuration” (EventCode=1006 OR EventCode=1011 OR EventCode=1012) Message=”USBSTOR”
| rex field=Message “Device (?<device_id>[^ ]+) was configured.”
| rex field=Message “Device (?<device_id>[^ ]+) was started.”
| rex field=Message “Device (?<device_id>[^ ]+) was deleted.”
| stats values(Message) as event_messages by _time, host, device_id
| sort -_time
| table time, host, device_id, event_messages
// Sysmon EventCode 11 (FileCreate) can also catch file writes to USB drives if path is known.
// For more specific USB logging (Device IDs, Vendor, Product):
// index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-DriverFrameworks-UserMode/Operational” EventID=2003 OR EventID=2004 OR EventID=2010 OR EventID=2100 OR EventID=2102 OR EventID=2105
// | search Message=”USBSTOR” // Filter for USB Storage devices
// | parse Message “Device ‘SWD\WPDBUSENUM\??_USBSTOR#*” as * usb_details // Example parsing, will vary
// | table _time, host, user, usb_details, Message

Unauthorized Software Installations (Requires Software Installation Auditing or Sysmon)
Index=Your_Sysmon_Index EventCode=1 (process_name IN (“msiexec.exe”, “setup.exe”, “install.exe”) OR command_line IN (“.msi”, “.exe /install”))
| lookup approved_software_lookup process_name AS process_name OUTPUT approved
| where isnull(approved) OR approved=”false”
| stats count by _time, host, user, process_name, command_line
| sort -_time
| table _time, host, user, process_name, command_line, count
// Windows Event Log (System log, EventID 11707 for successful MSI install, 1033 for MsiInstaller Product Name)
// index=Your_Windows_Index sourcetype=”WinEventLog:Application” SourceName=”MsiInstaller” (EventCode=1033 OR EventCode=11707)
// | eval ProductName=if(EventCode=1033, EventData.ProductUrl, EventData.P1) // Field name might vary
// | lookup approved_software_lookup ProductName OUTPUT approved
// | where isnull(approved) OR approved=”false”
// | stats values(EventCode) as event_codes by _time, host, user, ProductName
// | table _time, host, user, ProductName, event_codes

Printing Activity (Requires Print Service Auditing)
Index=Your_Windows_Index sourcetype=”WinEventLog:Microsoft-Windows-PrintService/Operational” EventCode=307
| rex field=Message “Document (?<document_id>\d+), (?<document_name>[^,]+ owned by (?[^ ]+) on machine (?<client_machine>[^ ]+) was printed on (?<printer_name>[^ ]+) via port (?<port_name>[^ ]+). Size in bytes: (?<size_bytes>\d+). Pages printed: (?<pages_printed>\d+).”
| table _time, host, owner, client_machine, document_name, printer_name, size_bytes, pages_printed

Screenshot Tool Usage (Sysmon is best)
Index=Your_Sysmon_Index EventCode=1 (process_name=”SnippingTool.exe” OR process_name=”ScreenClippingHost.exe” OR process_name=”ms-screenclip:” OR Image=”C:\Windows\System32\SnippingTool.exe” OR Image=”C:\Windows\SystemApps\Microsoft.Windows.SecHealthUI_cw5n1h2txyewy\ScreenClipping\ScreenClippingHost.exe”)
| stats count by _time, host, user, process_name, command_line
| sort -_time
| table _time, host, user, process_name, command_line, count

Linux
USB Device Connections (Requires auditd with usb-storage rules or usbguard)
Index=Your_Linux_Index sourcetype=syslog process=”usbguard-daemon”
| rex “Rule (?<rule_id>\d+) (?\w+) device id=’(?<device_id>[^’]+)’.*name=’(?<device_name>[^’]+)’.*serial=’(?<device_serial>[^’]+)’.*with-interface=’(?<device_interface>[^’]+)’”
| search device_interface=”080650” // Filter for Mass Storage interface class/subclass/protocol
| stats values(action) as actions by _time, host, device_name, device_serial, device_id
| sort -_time
| table _time, host, device_name, device_serial, device_id, actions

Index=Your_Auditd_Index sourcetype=linux_audit key=”usb_events” type=SYSCALL
// This is very noisy; needs significant filtering based on specific devices or attributes // Often better to use usbguard or EDR capabilities for this. | stats count by _time, host, auid, exe, path
| table _time, host, auid, exe, path, count

Use of Unapproved Commands/Tools (Auditd)
Index=Your_Auditd_Index sourcetype=linux_audit type=SYSCALL key=”monitored_command_execution” exe=”/usr/bin/nmap”
| stats values(a0) as args_preview, count by _time, host, auid, exe, cwd // cwd is current working directory
| sort -_time
| table _time, host, auid, exe, args_preview, cwd, count
